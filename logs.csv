0,id,title,link,content,published,medium,instagram
0,5aa029509772ae0f67ad1153:5ccc7cca085229b841413f22:5cccaa8af9619a23bce294f0,How to Post from your Website to Medium using Python,https://www.erikwjacobson.com/blog/2019/5/3/posting-rss-feed-blog-posts-to-medium,"<p class="""">I’ve been playing around with the idea of doing some writing on my website, and since I tend to procrastinate I wanted to remove as many barriers as possible. To make the flow of content publishing a bit easier, I wrote a tool that takes RSS feed data and publishes new blog posts from my Squarespace website to Medium, a platform that Squarespace currently does not support. You can find the code on my <a href=""https://github.com/erikwjacobson/rss-social-publisher"">Github</a>. This article will walk you through some of the basic steps in how to implement something similar on your own using python. We’ll start by getting everything we need to make requests to the Medium API, and then figure out how to get all of the data from an RSS feed into python and then out to Medium.</p><h2>Getting Auth Credentials</h2><p class="""">There’s two things you need in order to start making requests to the Medium API:</p><ul data-rte-list=""default""><li><p class="""">A <strong>bearer token</strong>, which is a unique secret token that will authenticate requests to access your account</p></li><li><p class="""">An <strong>account ID</strong>, which you’ll need to make requests for new posts</p></li></ul><h3>Bearer Token</h3><p class="""">There are two ways you can authenticate an app for Medium, either by using OAuth or just a simple bearer token. I chose to use the bearer token solution since it’s easiest for a small app like mine where I’ll only be posting to my own Medium account. Looking at the <a href=""https://github.com/Medium/medium-api-docs"" target=""_blank"">API documentation</a>, Medium does things a bit differently with their API. The first step to getting your bearer token is to email the support team (yourfriends@medium.com). This seemed a bit odd to me, but after sending an email requesting the ability to generate a bearer token for my account, they responded within an hour and I was able to get my bearer token. Once you email them, they will activate the ability for you to generate bearer tokens at your settings page. If you include this token in your request headers, it should work just great.</p><h3>Account ID</h3><p class="""">To get your account ID, you can simply use the newly generated bearer token to make a get request to the URL <span>https://api.medium.com/v1/me</span>. The following python code can be used to make this request, which will return json including your account ID and other user information.</p><pre><code>import requests

headers = ({
    ""Authorization"": ""Bearer &lt;your-token&gt;"",
})
request = requests.get(""https://api.medium.com/v1/me"", headers=headers)

print(request.json())</code></pre><p class="""">This will print the json containing your ID. I saved this in a separate json file called credentials.json that I later reference for my bearer token and account ID to make each request to Medium.</p><h2>Getting Your Blog Content Using feedparser</h2><p class="""">Once you’ve successfully made a request to the Medium API, the next step is to figure out how to acquire your blog posts from your website. Squarespace is the platform that I use, and luckily they already generate an RSS feed for every blog that you create. You can simply use <span>https://yourdomain.com/blog-slug?format=rss</span> to access the RSS feed for your Squarespace blog.</p><p class="""">feedparser is a python library that helps you to automatically parse RSS feeds. You can simply use the following code to access your blog content.</p><pre><code>rssContent = feedparser.parse(&lt;Your-RSS-Link&gt;)
blogPosts = rssContent['entries']</code></pre><p class="""">You can just iterate through blogPosts in order to access each individual blog post. Each post will include attributes such as the title, link, content (as “summary”), published date, etc.</p><h2>Posting to Medium</h2><p class="""">Using the same requests package, we can make a post request to the Medium API at https://api.medium.com/v1/users/&lt;your-account-id&gt;/posts to create a new blog post. The Medium API requires that you include the title, the format of the content (HTML or Markdown) and the content itself. You can create a dictionary in python like we did with the headers for the data, and pass it into the request.post function.</p><pre><code>data = ({
    'title': entry['title'],
    'contentFormat': 'html',
    'content': entry['summary']    
})
url = ""https://api.medium.com/v1/users/&lt;your-account-id&gt;/posts""
postRequest = requests.post(url, data=json.dumps(data), headers=headers)</code></pre><p class="""">So if we’ve received all of the blog posts using feedparser, and can iterate through each of them while accessing their content, we can make a post request to the Medium API for each blog post. However, this won’t account for repeats, so you may only want to post the newest blog post, or find a way to keep track of every post transferred to Medium and verify each blog post before posting.</p><p class="""">If you found this helpful, or if you ran into any issues in this post that I should address, please let me know! You can contact me through my website, or send me a message on Twitter <a href=""https://twitter.com/ewjacobson"" target=""_blank"">@ewjacobson</a>.</p>","Sat, 04 May 2019 01:22:01 +0000",TRUE,FALSE
